// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}


model Result {
    id String @id @default(cuid())
    gender String
    m_1_1 Float
    m_1_2 Float
    m_1_3 Float
    m_1_4 Float
    m_1_5 Float
    m_1_6 Float
    m_1_7 Float
    m_1_8 Float
    m_1_9 Float
    m_1_10 Float
    m_2_1 Float
    m_2_2 Float
    m_2_3 Float
    m_2_4 Float
    m_2_5 Float
    m_2_6 Float
    m_2_7 Float
    m_2_8 Float
    m_2_9 Float
    m_2_10 Float
    m_2_11 Float
    m_2_12 Float
    m_2_13 Float
    m_3_1 Float
    m_3_2 Float
    m_3_3 Float
    m_3_4 Float
    m_3_5 Float
    m_4_1 Float
    m_4_2 Float
    m_4_3 Float
    m_4_4 Float
    m_4_5 Float
    m_4_6 Float
    m_4_7 Float
    m_5_1 Float
    m_5_2 Float
    m_5_3 Float
    createdAt DateTime @default(now())
}


model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
